// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: device_health.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDeviceHealth = `-- name: CreateDeviceHealth :one
INSERT INTO "device_health" (
    connection_type, free_memory, free_storage, battery_level, battery_save_mode, device_id
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, connection_type, free_memory, free_storage, battery_level, battery_save_mode, created_at, device_id
`

type CreateDeviceHealthParams struct {
	ConnectionType  string        `json:"connection_type"`
	FreeMemory      pgtype.Float8 `json:"free_memory"`
	FreeStorage     pgtype.Float8 `json:"free_storage"`
	BatteryLevel    pgtype.Float8 `json:"battery_level"`
	BatterySaveMode bool          `json:"battery_save_mode"`
	DeviceID        int64         `json:"device_id"`
}

func (q *Queries) CreateDeviceHealth(ctx context.Context, arg CreateDeviceHealthParams) (DeviceHealth, error) {
	row := q.db.QueryRow(ctx, createDeviceHealth,
		arg.ConnectionType,
		arg.FreeMemory,
		arg.FreeStorage,
		arg.BatteryLevel,
		arg.BatterySaveMode,
		arg.DeviceID,
	)
	var i DeviceHealth
	err := row.Scan(
		&i.ID,
		&i.ConnectionType,
		&i.FreeMemory,
		&i.FreeStorage,
		&i.BatteryLevel,
		&i.BatterySaveMode,
		&i.CreatedAt,
		&i.DeviceID,
	)
	return i, err
}

const deleteDeviceHealth = `-- name: DeleteDeviceHealth :exec
DELETE FROM "device_health"
WHERE device_id = $1
`

func (q *Queries) DeleteDeviceHealth(ctx context.Context, deviceID int64) error {
	_, err := q.db.Exec(ctx, deleteDeviceHealth, deviceID)
	return err
}

const getDeviceHealth = `-- name: GetDeviceHealth :one
SELECT id, connection_type, free_memory, free_storage, battery_level, battery_save_mode, created_at, device_id FROM "device_health"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDeviceHealth(ctx context.Context, id int64) (DeviceHealth, error) {
	row := q.db.QueryRow(ctx, getDeviceHealth, id)
	var i DeviceHealth
	err := row.Scan(
		&i.ID,
		&i.ConnectionType,
		&i.FreeMemory,
		&i.FreeStorage,
		&i.BatteryLevel,
		&i.BatterySaveMode,
		&i.CreatedAt,
		&i.DeviceID,
	)
	return i, err
}

const getDeviceHealths = `-- name: GetDeviceHealths :many
SELECT id, connection_type, free_memory, free_storage, battery_level, battery_save_mode, created_at, device_id FROM "device_health"
WHERE device_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetDeviceHealths(ctx context.Context, deviceID int64) ([]DeviceHealth, error) {
	rows, err := q.db.Query(ctx, getDeviceHealths, deviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DeviceHealth{}
	for rows.Next() {
		var i DeviceHealth
		if err := rows.Scan(
			&i.ID,
			&i.ConnectionType,
			&i.FreeMemory,
			&i.FreeStorage,
			&i.BatteryLevel,
			&i.BatterySaveMode,
			&i.CreatedAt,
			&i.DeviceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
