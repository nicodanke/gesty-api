// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: action.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAction = `-- name: CreateAction :one
INSERT INTO "action" (
    account_id, name, description, enabled, can_be_deleted
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, name, description, enabled, can_be_deleted, account_id
`

type CreateActionParams struct {
	AccountID    int64       `json:"account_id"`
	Name         string      `json:"name"`
	Description  pgtype.Text `json:"description"`
	Enabled      bool        `json:"enabled"`
	CanBeDeleted bool        `json:"can_be_deleted"`
}

func (q *Queries) CreateAction(ctx context.Context, arg CreateActionParams) (Action, error) {
	row := q.db.QueryRow(ctx, createAction,
		arg.AccountID,
		arg.Name,
		arg.Description,
		arg.Enabled,
		arg.CanBeDeleted,
	)
	var i Action
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Enabled,
		&i.CanBeDeleted,
		&i.AccountID,
	)
	return i, err
}

const deleteAction = `-- name: DeleteAction :exec
DELETE FROM "action"
WHERE account_id = $1 AND id = $2
`

type DeleteActionParams struct {
	AccountID int64 `json:"account_id"`
	ID        int64 `json:"id"`
}

func (q *Queries) DeleteAction(ctx context.Context, arg DeleteActionParams) error {
	_, err := q.db.Exec(ctx, deleteAction, arg.AccountID, arg.ID)
	return err
}

const getAction = `-- name: GetAction :one
SELECT id, name, description, enabled, can_be_deleted, account_id FROM "action"
WHERE account_id = $1 AND id = $2 LIMIT 1
`

type GetActionParams struct {
	AccountID int64 `json:"account_id"`
	ID        int64 `json:"id"`
}

func (q *Queries) GetAction(ctx context.Context, arg GetActionParams) (Action, error) {
	row := q.db.QueryRow(ctx, getAction, arg.AccountID, arg.ID)
	var i Action
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Enabled,
		&i.CanBeDeleted,
		&i.AccountID,
	)
	return i, err
}

const getActions = `-- name: GetActions :many
SELECT id, name, description, enabled, can_be_deleted, account_id FROM "action"
WHERE account_id = $1
ORDER BY LOWER(name)
LIMIT $2
OFFSET $3
`

type GetActionsParams struct {
	AccountID int64 `json:"account_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) GetActions(ctx context.Context, arg GetActionsParams) ([]Action, error) {
	rows, err := q.db.Query(ctx, getActions, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Action{}
	for rows.Next() {
		var i Action
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Enabled,
			&i.CanBeDeleted,
			&i.AccountID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAction = `-- name: UpdateAction :one
UPDATE "action"
SET
    name = COALESCE($1, name),
    description = COALESCE($2, description),
    enabled = COALESCE($3, enabled),
    can_be_deleted = COALESCE($4, can_be_deleted)
WHERE
    account_id = $5 AND id = $6
RETURNING id, name, description, enabled, can_be_deleted, account_id
`

type UpdateActionParams struct {
	Name         pgtype.Text `json:"name"`
	Description  pgtype.Text `json:"description"`
	Enabled      pgtype.Bool `json:"enabled"`
	CanBeDeleted pgtype.Bool `json:"can_be_deleted"`
	AccountID    int64       `json:"account_id"`
	ID           int64       `json:"id"`
}

func (q *Queries) UpdateAction(ctx context.Context, arg UpdateActionParams) (Action, error) {
	row := q.db.QueryRow(ctx, updateAction,
		arg.Name,
		arg.Description,
		arg.Enabled,
		arg.CanBeDeleted,
		arg.AccountID,
		arg.ID,
	)
	var i Action
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Enabled,
		&i.CanBeDeleted,
		&i.AccountID,
	)
	return i, err
}
