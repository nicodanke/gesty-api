// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: employee.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEmployee = `-- name: CreateEmployee :one
INSERT INTO "employee" (
    account_id, name, lastname, email, phone, gender, real_id, fiscal_id
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, name, lastname, email, phone, gender, real_id, fiscal_id, account_id, created_at, updated_at
`

type CreateEmployeeParams struct {
	AccountID int64  `json:"account_id"`
	Name      string `json:"name"`
	Lastname  string `json:"lastname"`
	Email     string `json:"email"`
	Phone     string `json:"phone"`
	Gender    string `json:"gender"`
	RealID    string `json:"real_id"`
	FiscalID  string `json:"fiscal_id"`
}

func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) (Employee, error) {
	row := q.db.QueryRow(ctx, createEmployee,
		arg.AccountID,
		arg.Name,
		arg.Lastname,
		arg.Email,
		arg.Phone,
		arg.Gender,
		arg.RealID,
		arg.FiscalID,
	)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Lastname,
		&i.Email,
		&i.Phone,
		&i.Gender,
		&i.RealID,
		&i.FiscalID,
		&i.AccountID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEmployee = `-- name: DeleteEmployee :exec
DELETE FROM "employee"
WHERE account_id = $1 AND id = $2
`

type DeleteEmployeeParams struct {
	AccountID int64 `json:"account_id"`
	ID        int64 `json:"id"`
}

func (q *Queries) DeleteEmployee(ctx context.Context, arg DeleteEmployeeParams) error {
	_, err := q.db.Exec(ctx, deleteEmployee, arg.AccountID, arg.ID)
	return err
}

const getEmployee = `-- name: GetEmployee :one
SELECT e.id, e.name, e.lastname, e.email, e.phone, e.gender, e.real_id, e.fiscal_id, e.account_id, e.created_at, e.updated_at, ea.employee_id, ea.country, ea.state, ea.sub_state, ea.street, ea.number, ea.unit, ea.postal_code, ea.lat, ea.lng,
    COALESCE(
        ARRAY_AGG(ef.facility_id) FILTER (WHERE ef.facility_id IS NOT NULL),
        '{}'::int8[]
    ) as facility_ids
FROM "employee" e
LEFT JOIN employee_address ea ON e.id = ea.employee_id
LEFT JOIN employee_facility ef ON e.id = ef.employee_id
WHERE e.account_id = $1 AND e.id = $2
GROUP BY e.id, e.name, e.lastname, e.email, e.phone, e.gender, e.real_id, e.fiscal_id, ea.country, ea.state, ea.sub_state, ea.street, ea.number, ea.unit, ea.postal_code, ea.lat, ea.lng
LIMIT 1
`

type GetEmployeeParams struct {
	AccountID int64 `json:"account_id"`
	ID        int64 `json:"id"`
}

type GetEmployeeRow struct {
	ID          int64         `json:"id"`
	Name        string        `json:"name"`
	Lastname    string        `json:"lastname"`
	Email       string        `json:"email"`
	Phone       string        `json:"phone"`
	Gender      string        `json:"gender"`
	RealID      string        `json:"real_id"`
	FiscalID    string        `json:"fiscal_id"`
	AccountID   int64         `json:"account_id"`
	CreatedAt   time.Time     `json:"created_at"`
	UpdatedAt   time.Time     `json:"updated_at"`
	EmployeeID  pgtype.Int8   `json:"employee_id"`
	Country     pgtype.Text   `json:"country"`
	State       pgtype.Text   `json:"state"`
	SubState    pgtype.Text   `json:"sub_state"`
	Street      pgtype.Text   `json:"street"`
	Number      pgtype.Text   `json:"number"`
	Unit        pgtype.Text   `json:"unit"`
	PostalCode  pgtype.Text   `json:"postal_code"`
	Lat         pgtype.Float8 `json:"lat"`
	Lng         pgtype.Float8 `json:"lng"`
	FacilityIds interface{}   `json:"facility_ids"`
}

func (q *Queries) GetEmployee(ctx context.Context, arg GetEmployeeParams) (GetEmployeeRow, error) {
	row := q.db.QueryRow(ctx, getEmployee, arg.AccountID, arg.ID)
	var i GetEmployeeRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Lastname,
		&i.Email,
		&i.Phone,
		&i.Gender,
		&i.RealID,
		&i.FiscalID,
		&i.AccountID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EmployeeID,
		&i.Country,
		&i.State,
		&i.SubState,
		&i.Street,
		&i.Number,
		&i.Unit,
		&i.PostalCode,
		&i.Lat,
		&i.Lng,
		&i.FacilityIds,
	)
	return i, err
}

const getEmployees = `-- name: GetEmployees :many
SELECT e.id, e.name, e.lastname, e.email, e.phone, e.gender, e.real_id, e.fiscal_id, e.account_id, e.created_at, e.updated_at, ea.employee_id, ea.country, ea.state, ea.sub_state, ea.street, ea.number, ea.unit, ea.postal_code, ea.lat, ea.lng,
    COALESCE(
        ARRAY_AGG(ef.facility_id) FILTER (WHERE ef.facility_id IS NOT NULL),
        '{}'::int8[]
    ) as facility_ids
FROM "employee" e
LEFT JOIN employee_address ea ON e.id = ea.employee_id
LEFT JOIN employee_facility ef ON e.id = ef.employee_id
WHERE e.account_id = $1
GROUP BY e.id, e.name, e.lastname, e.email, e.phone, e.gender, e.real_id, e.fiscal_id, ea.country, ea.state, ea.sub_state, ea.street, ea.number, ea.unit, ea.postal_code, ea.lat, ea.lng
ORDER BY LOWER(e.name)
LIMIT $2
OFFSET $3
`

type GetEmployeesParams struct {
	AccountID int64 `json:"account_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

type GetEmployeesRow struct {
	ID          int64         `json:"id"`
	Name        string        `json:"name"`
	Lastname    string        `json:"lastname"`
	Email       string        `json:"email"`
	Phone       string        `json:"phone"`
	Gender      string        `json:"gender"`
	RealID      string        `json:"real_id"`
	FiscalID    string        `json:"fiscal_id"`
	AccountID   int64         `json:"account_id"`
	CreatedAt   time.Time     `json:"created_at"`
	UpdatedAt   time.Time     `json:"updated_at"`
	EmployeeID  pgtype.Int8   `json:"employee_id"`
	Country     pgtype.Text   `json:"country"`
	State       pgtype.Text   `json:"state"`
	SubState    pgtype.Text   `json:"sub_state"`
	Street      pgtype.Text   `json:"street"`
	Number      pgtype.Text   `json:"number"`
	Unit        pgtype.Text   `json:"unit"`
	PostalCode  pgtype.Text   `json:"postal_code"`
	Lat         pgtype.Float8 `json:"lat"`
	Lng         pgtype.Float8 `json:"lng"`
	FacilityIds interface{}   `json:"facility_ids"`
}

func (q *Queries) GetEmployees(ctx context.Context, arg GetEmployeesParams) ([]GetEmployeesRow, error) {
	rows, err := q.db.Query(ctx, getEmployees, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetEmployeesRow{}
	for rows.Next() {
		var i GetEmployeesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Lastname,
			&i.Email,
			&i.Phone,
			&i.Gender,
			&i.RealID,
			&i.FiscalID,
			&i.AccountID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.EmployeeID,
			&i.Country,
			&i.State,
			&i.SubState,
			&i.Street,
			&i.Number,
			&i.Unit,
			&i.PostalCode,
			&i.Lat,
			&i.Lng,
			&i.FacilityIds,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmployee = `-- name: UpdateEmployee :one
UPDATE "employee"
SET
    name = COALESCE($1, name),
    lastname = COALESCE($2, lastname),
    email = COALESCE($3, email),
    phone = COALESCE($4, phone),
    gender = COALESCE($5, gender),
    real_id = COALESCE($6, real_id),
    fiscal_id = COALESCE($7, fiscal_id)
WHERE
    account_id = $8 AND id = $9
RETURNING id, name, lastname, email, phone, gender, real_id, fiscal_id, account_id, created_at, updated_at
`

type UpdateEmployeeParams struct {
	Name      pgtype.Text `json:"name"`
	Lastname  pgtype.Text `json:"lastname"`
	Email     pgtype.Text `json:"email"`
	Phone     pgtype.Text `json:"phone"`
	Gender    pgtype.Text `json:"gender"`
	RealID    pgtype.Text `json:"real_id"`
	FiscalID  pgtype.Text `json:"fiscal_id"`
	AccountID int64       `json:"account_id"`
	ID        int64       `json:"id"`
}

func (q *Queries) UpdateEmployee(ctx context.Context, arg UpdateEmployeeParams) (Employee, error) {
	row := q.db.QueryRow(ctx, updateEmployee,
		arg.Name,
		arg.Lastname,
		arg.Email,
		arg.Phone,
		arg.Gender,
		arg.RealID,
		arg.FiscalID,
		arg.AccountID,
		arg.ID,
	)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Lastname,
		&i.Email,
		&i.Phone,
		&i.Gender,
		&i.RealID,
		&i.FiscalID,
		&i.AccountID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
