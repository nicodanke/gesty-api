// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: attendance.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createAttendance = `-- name: CreateAttendance :one
INSERT INTO "attendance" (
    time_in, employee_id, action_id, device_id
) VALUES (
    $1, $2, $3, $4
) RETURNING id, created_at, time_in, employee_id, action_id, device_id
`

type CreateAttendanceParams struct {
	TimeIn     time.Time `json:"time_in"`
	EmployeeID int64     `json:"employee_id"`
	ActionID   int64     `json:"action_id"`
	DeviceID   int64     `json:"device_id"`
}

func (q *Queries) CreateAttendance(ctx context.Context, arg CreateAttendanceParams) (Attendance, error) {
	row := q.db.QueryRow(ctx, createAttendance,
		arg.TimeIn,
		arg.EmployeeID,
		arg.ActionID,
		arg.DeviceID,
	)
	var i Attendance
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.TimeIn,
		&i.EmployeeID,
		&i.ActionID,
		&i.DeviceID,
	)
	return i, err
}

const deleteAttendance = `-- name: DeleteAttendance :exec
DELETE FROM "attendance"
WHERE id = $1
`

func (q *Queries) DeleteAttendance(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAttendance, id)
	return err
}

const getAttendance = `-- name: GetAttendance :one
SELECT id, created_at, time_in, employee_id, action_id, device_id FROM "attendance"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAttendance(ctx context.Context, id uuid.UUID) (Attendance, error) {
	row := q.db.QueryRow(ctx, getAttendance, id)
	var i Attendance
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.TimeIn,
		&i.EmployeeID,
		&i.ActionID,
		&i.DeviceID,
	)
	return i, err
}

const getAttendances = `-- name: GetAttendances :many
SELECT id, created_at, time_in, employee_id, action_id, device_id FROM "attendance"
ORDER BY time_in DESC
LIMIT $1
OFFSET $2
`

type GetAttendancesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAttendances(ctx context.Context, arg GetAttendancesParams) ([]Attendance, error) {
	rows, err := q.db.Query(ctx, getAttendances, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Attendance{}
	for rows.Next() {
		var i Attendance
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.TimeIn,
			&i.EmployeeID,
			&i.ActionID,
			&i.DeviceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
