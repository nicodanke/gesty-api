// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: employee_facility.sql

package db

import (
	"context"
)

const createEmployeeFacility = `-- name: CreateEmployeeFacility :one
INSERT INTO "employee_facility" (
    employee_id, facility_id
) VALUES (
    $1, $2
) RETURNING facility_id, employee_id
`

type CreateEmployeeFacilityParams struct {
	EmployeeID int64 `json:"employee_id"`
	FacilityID int64 `json:"facility_id"`
}

func (q *Queries) CreateEmployeeFacility(ctx context.Context, arg CreateEmployeeFacilityParams) (EmployeeFacility, error) {
	row := q.db.QueryRow(ctx, createEmployeeFacility, arg.EmployeeID, arg.FacilityID)
	var i EmployeeFacility
	err := row.Scan(&i.FacilityID, &i.EmployeeID)
	return i, err
}

const deleteEmployeeFacilityByEmployeeId = `-- name: DeleteEmployeeFacilityByEmployeeId :exec
DELETE FROM "employee_facility"
WHERE employee_id = $1
`

func (q *Queries) DeleteEmployeeFacilityByEmployeeId(ctx context.Context, employeeID int64) error {
	_, err := q.db.Exec(ctx, deleteEmployeeFacilityByEmployeeId, employeeID)
	return err
}

const deleteEmployeeFacilityByFacilityId = `-- name: DeleteEmployeeFacilityByFacilityId :exec
DELETE FROM "employee_facility"
WHERE facility_id = $1
`

func (q *Queries) DeleteEmployeeFacilityByFacilityId(ctx context.Context, facilityID int64) error {
	_, err := q.db.Exec(ctx, deleteEmployeeFacilityByFacilityId, facilityID)
	return err
}

const getEmployeeFacilitiesByEmployeeId = `-- name: GetEmployeeFacilitiesByEmployeeId :many
SELECT facility_id, employee_id FROM "employee_facility"
WHERE employee_id = $1
`

func (q *Queries) GetEmployeeFacilitiesByEmployeeId(ctx context.Context, employeeID int64) ([]EmployeeFacility, error) {
	rows, err := q.db.Query(ctx, getEmployeeFacilitiesByEmployeeId, employeeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EmployeeFacility{}
	for rows.Next() {
		var i EmployeeFacility
		if err := rows.Scan(&i.FacilityID, &i.EmployeeID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEmployeeFacilitiesByFacilityId = `-- name: GetEmployeeFacilitiesByFacilityId :many
SELECT facility_id, employee_id FROM "employee_facility"
WHERE facility_id = $1
`

func (q *Queries) GetEmployeeFacilitiesByFacilityId(ctx context.Context, facilityID int64) ([]EmployeeFacility, error) {
	rows, err := q.db.Query(ctx, getEmployeeFacilitiesByFacilityId, facilityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EmployeeFacility{}
	for rows.Next() {
		var i EmployeeFacility
		if err := rows.Scan(&i.FacilityID, &i.EmployeeID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
