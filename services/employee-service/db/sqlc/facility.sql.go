// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: facility.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFacility = `-- name: CreateFacility :one
INSERT INTO "facility" (
    account_id, name, description, open_time, close_time
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, name, description, open_time, close_time, account_id, created_at, updated_at
`

type CreateFacilityParams struct {
	AccountID   int64       `json:"account_id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	OpenTime    pgtype.Time `json:"open_time"`
	CloseTime   pgtype.Time `json:"close_time"`
}

func (q *Queries) CreateFacility(ctx context.Context, arg CreateFacilityParams) (Facility, error) {
	row := q.db.QueryRow(ctx, createFacility,
		arg.AccountID,
		arg.Name,
		arg.Description,
		arg.OpenTime,
		arg.CloseTime,
	)
	var i Facility
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.OpenTime,
		&i.CloseTime,
		&i.AccountID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFacility = `-- name: DeleteFacility :exec
DELETE FROM "facility"
WHERE account_id = $1 AND id = $2
`

type DeleteFacilityParams struct {
	AccountID int64 `json:"account_id"`
	ID        int64 `json:"id"`
}

func (q *Queries) DeleteFacility(ctx context.Context, arg DeleteFacilityParams) error {
	_, err := q.db.Exec(ctx, deleteFacility, arg.AccountID, arg.ID)
	return err
}

const getFacilities = `-- name: GetFacilities :many
SELECT f.id, f.name, f.description, f.open_time, f.close_time, fa.country, fa.state, fa.sub_state, fa.street, fa.number, fa.unit, fa.zip_code, fa.lat, fa.lng
FROM "facility" f
LEFT JOIN facility_address fa ON f.id = fa.facility_id
WHERE f.account_id = $1
GROUP BY f.id, f.name, f.description, f.open_time, f.close_time, fa.country, fa.state, fa.sub_state, fa.street, fa.number, fa.unit, fa.zip_code, fa.lat, fa.lng
ORDER BY LOWER(f.name)
LIMIT $2
OFFSET $3
`

type GetFacilitiesParams struct {
	AccountID int64 `json:"account_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

type GetFacilitiesRow struct {
	ID          int64         `json:"id"`
	Name        string        `json:"name"`
	Description pgtype.Text   `json:"description"`
	OpenTime    pgtype.Time   `json:"open_time"`
	CloseTime   pgtype.Time   `json:"close_time"`
	Country     pgtype.Text   `json:"country"`
	State       pgtype.Text   `json:"state"`
	SubState    pgtype.Text   `json:"sub_state"`
	Street      pgtype.Text   `json:"street"`
	Number      pgtype.Text   `json:"number"`
	Unit        pgtype.Text   `json:"unit"`
	ZipCode     pgtype.Text   `json:"zip_code"`
	Lat         pgtype.Float8 `json:"lat"`
	Lng         pgtype.Float8 `json:"lng"`
}

func (q *Queries) GetFacilities(ctx context.Context, arg GetFacilitiesParams) ([]GetFacilitiesRow, error) {
	rows, err := q.db.Query(ctx, getFacilities, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetFacilitiesRow{}
	for rows.Next() {
		var i GetFacilitiesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.OpenTime,
			&i.CloseTime,
			&i.Country,
			&i.State,
			&i.SubState,
			&i.Street,
			&i.Number,
			&i.Unit,
			&i.ZipCode,
			&i.Lat,
			&i.Lng,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFacility = `-- name: GetFacility :one
SELECT f.id, f.name, f.description, f.open_time, f.close_time, fa.country, fa.state, fa.sub_state, fa.street, fa.number, fa.unit, fa.zip_code, fa.lat, fa.lng
FROM "facility" f
LEFT JOIN facility_address fa ON f.id = fa.facility_id
WHERE f.account_id = $1 AND f.id = $2
GROUP BY f.id, f.name, f.description, f.open_time, f.close_time, fa.country, fa.state, fa.sub_state, fa.street, fa.number, fa.unit, fa.zip_code, fa.lat, fa.lng
LIMIT 1
`

type GetFacilityParams struct {
	AccountID int64 `json:"account_id"`
	ID        int64 `json:"id"`
}

type GetFacilityRow struct {
	ID          int64         `json:"id"`
	Name        string        `json:"name"`
	Description pgtype.Text   `json:"description"`
	OpenTime    pgtype.Time   `json:"open_time"`
	CloseTime   pgtype.Time   `json:"close_time"`
	Country     pgtype.Text   `json:"country"`
	State       pgtype.Text   `json:"state"`
	SubState    pgtype.Text   `json:"sub_state"`
	Street      pgtype.Text   `json:"street"`
	Number      pgtype.Text   `json:"number"`
	Unit        pgtype.Text   `json:"unit"`
	ZipCode     pgtype.Text   `json:"zip_code"`
	Lat         pgtype.Float8 `json:"lat"`
	Lng         pgtype.Float8 `json:"lng"`
}

func (q *Queries) GetFacility(ctx context.Context, arg GetFacilityParams) (GetFacilityRow, error) {
	row := q.db.QueryRow(ctx, getFacility, arg.AccountID, arg.ID)
	var i GetFacilityRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.OpenTime,
		&i.CloseTime,
		&i.Country,
		&i.State,
		&i.SubState,
		&i.Street,
		&i.Number,
		&i.Unit,
		&i.ZipCode,
		&i.Lat,
		&i.Lng,
	)
	return i, err
}

const updateFacility = `-- name: UpdateFacility :one
UPDATE "facility"
SET
    name = COALESCE($1, name),
    description = COALESCE($2, description),
    open_time = COALESCE($3, open_time),
    close_time = COALESCE($4, close_time),
    updated_at = COALESCE($5, updated_at)
WHERE
    account_id = $6 AND id = $7
RETURNING id, name, description, open_time, close_time, account_id, created_at, updated_at
`

type UpdateFacilityParams struct {
	Name        pgtype.Text        `json:"name"`
	Description pgtype.Text        `json:"description"`
	OpenTime    pgtype.Time        `json:"open_time"`
	CloseTime   pgtype.Time        `json:"close_time"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	AccountID   int64              `json:"account_id"`
	ID          int64              `json:"id"`
}

func (q *Queries) UpdateFacility(ctx context.Context, arg UpdateFacilityParams) (Facility, error) {
	row := q.db.QueryRow(ctx, updateFacility,
		arg.Name,
		arg.Description,
		arg.OpenTime,
		arg.CloseTime,
		arg.UpdatedAt,
		arg.AccountID,
		arg.ID,
	)
	var i Facility
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.OpenTime,
		&i.CloseTime,
		&i.AccountID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
