// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: employee_photo.sql

package db

import (
	"context"
)

const createEmployeePhoto = `-- name: CreateEmployeePhoto :one
INSERT INTO "employee_photo" (
    employee_id, image_base_64, vector_image, account_id, is_profile
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, employee_id, account_id, image_base_64, vector_image, is_profile, created_at
`

type CreateEmployeePhotoParams struct {
	EmployeeID  int64  `json:"employee_id"`
	ImageBase64 string `json:"image_base_64"`
	VectorImage string `json:"vector_image"`
	AccountID   int64  `json:"account_id"`
	IsProfile   bool   `json:"is_profile"`
}

func (q *Queries) CreateEmployeePhoto(ctx context.Context, arg CreateEmployeePhotoParams) (EmployeePhoto, error) {
	row := q.db.QueryRow(ctx, createEmployeePhoto,
		arg.EmployeeID,
		arg.ImageBase64,
		arg.VectorImage,
		arg.AccountID,
		arg.IsProfile,
	)
	var i EmployeePhoto
	err := row.Scan(
		&i.ID,
		&i.EmployeeID,
		&i.AccountID,
		&i.ImageBase64,
		&i.VectorImage,
		&i.IsProfile,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEmployeePhoto = `-- name: DeleteEmployeePhoto :exec
DELETE FROM "employee_photo"
WHERE id = $1 AND employee_id = $2 AND is_profile = false
`

type DeleteEmployeePhotoParams struct {
	ID         int64 `json:"id"`
	EmployeeID int64 `json:"employee_id"`
}

func (q *Queries) DeleteEmployeePhoto(ctx context.Context, arg DeleteEmployeePhotoParams) error {
	_, err := q.db.Exec(ctx, deleteEmployeePhoto, arg.ID, arg.EmployeeID)
	return err
}

const getEmployeePhotos = `-- name: GetEmployeePhotos :many
SELECT id, employee_id, account_id, image_base_64, vector_image, is_profile, created_at FROM "employee_photo"
WHERE employee_id = $1 AND account_id = $2
ORDER BY created_at DESC
LIMIT $3
OFFSET $4
`

type GetEmployeePhotosParams struct {
	EmployeeID int64 `json:"employee_id"`
	AccountID  int64 `json:"account_id"`
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
}

func (q *Queries) GetEmployeePhotos(ctx context.Context, arg GetEmployeePhotosParams) ([]EmployeePhoto, error) {
	rows, err := q.db.Query(ctx, getEmployeePhotos,
		arg.EmployeeID,
		arg.AccountID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EmployeePhoto{}
	for rows.Next() {
		var i EmployeePhoto
		if err := rows.Scan(
			&i.ID,
			&i.EmployeeID,
			&i.AccountID,
			&i.ImageBase64,
			&i.VectorImage,
			&i.IsProfile,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEmployeeProfilePhoto = `-- name: GetEmployeeProfilePhoto :one
SELECT id, employee_id, account_id, image_base_64, vector_image, is_profile, created_at FROM "employee_photo"
WHERE employee_id = $1 AND account_id = $2 AND is_profile = true
ORDER BY created_at DESC
LIMIT 3
`

type GetEmployeeProfilePhotoParams struct {
	EmployeeID int64 `json:"employee_id"`
	AccountID  int64 `json:"account_id"`
}

func (q *Queries) GetEmployeeProfilePhoto(ctx context.Context, arg GetEmployeeProfilePhotoParams) (EmployeePhoto, error) {
	row := q.db.QueryRow(ctx, getEmployeeProfilePhoto, arg.EmployeeID, arg.AccountID)
	var i EmployeePhoto
	err := row.Scan(
		&i.ID,
		&i.EmployeeID,
		&i.AccountID,
		&i.ImageBase64,
		&i.VectorImage,
		&i.IsProfile,
		&i.CreatedAt,
	)
	return i, err
}
