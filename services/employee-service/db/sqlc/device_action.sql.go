// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: device_action.sql

package db

import (
	"context"
)

const createDeviceAction = `-- name: CreateDeviceAction :one
INSERT INTO "device_action" (
    device_id, action_id
) VALUES (
    $1, $2
) RETURNING device_id, action_id
`

type CreateDeviceActionParams struct {
	DeviceID int64 `json:"device_id"`
	ActionID int64 `json:"action_id"`
}

func (q *Queries) CreateDeviceAction(ctx context.Context, arg CreateDeviceActionParams) (DeviceAction, error) {
	row := q.db.QueryRow(ctx, createDeviceAction, arg.DeviceID, arg.ActionID)
	var i DeviceAction
	err := row.Scan(&i.DeviceID, &i.ActionID)
	return i, err
}

const deleteDeviceActionByDeviceId = `-- name: DeleteDeviceActionByDeviceId :exec
DELETE FROM "device_action"
WHERE device_id = $1
`

func (q *Queries) DeleteDeviceActionByDeviceId(ctx context.Context, deviceID int64) error {
	_, err := q.db.Exec(ctx, deleteDeviceActionByDeviceId, deviceID)
	return err
}

const getDeviceActionsByDeviceId = `-- name: GetDeviceActionsByDeviceId :many
SELECT device_id, action_id FROM "device_action"
WHERE device_id = $1
`

func (q *Queries) GetDeviceActionsByDeviceId(ctx context.Context, deviceID int64) ([]DeviceAction, error) {
	rows, err := q.db.Query(ctx, getDeviceActionsByDeviceId, deviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DeviceAction{}
	for rows.Next() {
		var i DeviceAction
		if err := rows.Scan(&i.DeviceID, &i.ActionID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
