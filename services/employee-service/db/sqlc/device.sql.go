// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: device.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDevice = `-- name: CreateDevice :one
INSERT INTO "device" (
    account_id, name, enabled, password, facility_id
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, name, password, enabled, active, activation_code, activation_code_expires_at, device_name, device_model, device_brand, device_serial_number, device_os, device_ram, device_storage, device_os_version, facility_id, account_id, created_at, updated_at
`

type CreateDeviceParams struct {
	AccountID  int64  `json:"account_id"`
	Name       string `json:"name"`
	Enabled    bool   `json:"enabled"`
	Password   string `json:"password"`
	FacilityID int64  `json:"facility_id"`
}

func (q *Queries) CreateDevice(ctx context.Context, arg CreateDeviceParams) (Device, error) {
	row := q.db.QueryRow(ctx, createDevice,
		arg.AccountID,
		arg.Name,
		arg.Enabled,
		arg.Password,
		arg.FacilityID,
	)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Enabled,
		&i.Active,
		&i.ActivationCode,
		&i.ActivationCodeExpiresAt,
		&i.DeviceName,
		&i.DeviceModel,
		&i.DeviceBrand,
		&i.DeviceSerialNumber,
		&i.DeviceOs,
		&i.DeviceRam,
		&i.DeviceStorage,
		&i.DeviceOsVersion,
		&i.FacilityID,
		&i.AccountID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDevice = `-- name: DeleteDevice :exec
DELETE FROM "device"
WHERE account_id = $1 AND id = $2
`

type DeleteDeviceParams struct {
	AccountID int64 `json:"account_id"`
	ID        int64 `json:"id"`
}

func (q *Queries) DeleteDevice(ctx context.Context, arg DeleteDeviceParams) error {
	_, err := q.db.Exec(ctx, deleteDevice, arg.AccountID, arg.ID)
	return err
}

const getDevice = `-- name: GetDevice :one
SELECT d.id, d.name, d.password, d.enabled, d.active, d.activation_code, d.activation_code_expires_at, d.device_name, d.device_model, d.device_brand, d.device_serial_number, d.device_os, d.device_ram, d.device_storage, d.device_os_version, d.facility_id, d.account_id, d.created_at, d.updated_at,
    COALESCE(
        ARRAY_AGG(da.action_id) FILTER (WHERE da.action_id IS NOT NULL),
        '{}'::int8[]
    ) as action_ids
FROM "device" d
LEFT JOIN device_action da ON d.id = da.device_id
WHERE d.account_id = $1 AND d.id = $2
GROUP BY d.id, d.name, d.enabled, d.facility_id
LIMIT 1
`

type GetDeviceParams struct {
	AccountID int64 `json:"account_id"`
	ID        int64 `json:"id"`
}

type GetDeviceRow struct {
	ID                      int64         `json:"id"`
	Name                    string        `json:"name"`
	Password                string        `json:"password"`
	Enabled                 bool          `json:"enabled"`
	Active                  bool          `json:"active"`
	ActivationCode          pgtype.Text   `json:"activation_code"`
	ActivationCodeExpiresAt time.Time     `json:"activation_code_expires_at"`
	DeviceName              pgtype.Text   `json:"device_name"`
	DeviceModel             pgtype.Text   `json:"device_model"`
	DeviceBrand             pgtype.Text   `json:"device_brand"`
	DeviceSerialNumber      pgtype.Text   `json:"device_serial_number"`
	DeviceOs                pgtype.Text   `json:"device_os"`
	DeviceRam               pgtype.Float8 `json:"device_ram"`
	DeviceStorage           pgtype.Float8 `json:"device_storage"`
	DeviceOsVersion         pgtype.Text   `json:"device_os_version"`
	FacilityID              int64         `json:"facility_id"`
	AccountID               int64         `json:"account_id"`
	CreatedAt               time.Time     `json:"created_at"`
	UpdatedAt               time.Time     `json:"updated_at"`
	ActionIds               interface{}   `json:"action_ids"`
}

func (q *Queries) GetDevice(ctx context.Context, arg GetDeviceParams) (GetDeviceRow, error) {
	row := q.db.QueryRow(ctx, getDevice, arg.AccountID, arg.ID)
	var i GetDeviceRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Enabled,
		&i.Active,
		&i.ActivationCode,
		&i.ActivationCodeExpiresAt,
		&i.DeviceName,
		&i.DeviceModel,
		&i.DeviceBrand,
		&i.DeviceSerialNumber,
		&i.DeviceOs,
		&i.DeviceRam,
		&i.DeviceStorage,
		&i.DeviceOsVersion,
		&i.FacilityID,
		&i.AccountID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ActionIds,
	)
	return i, err
}

const getDevices = `-- name: GetDevices :many
SELECT d.id, d.name, d.enabled, d.facility_id, d.password, d.created_at, d.updated_at, d.activation_code, d.activation_code_expires_at, d.device_name, d.device_brand, d.device_model, d.device_serial_number, d.device_os, d.device_ram, d.device_storage, d.device_os_version,
    COALESCE(
        ARRAY_AGG(da.action_id) FILTER (WHERE da.action_id IS NOT NULL),
        '{}'::int8[]
    ) as action_ids
FROM "device" d
LEFT JOIN device_action da ON d.id = da.device_id
WHERE account_id = $1
GROUP BY d.id, d.name, d.enabled, d.facility_id, d.password, d.created_at, d.updated_at, d.activation_code, d.activation_code_expires_at, d.device_name, d.device_brand, d.device_model, d.device_serial_number, d.device_os, d.device_ram, d.device_storage, d.device_os_version
ORDER BY LOWER(name)
LIMIT $2
OFFSET $3
`

type GetDevicesParams struct {
	AccountID int64 `json:"account_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

type GetDevicesRow struct {
	ID                      int64         `json:"id"`
	Name                    string        `json:"name"`
	Enabled                 bool          `json:"enabled"`
	FacilityID              int64         `json:"facility_id"`
	Password                string        `json:"password"`
	CreatedAt               time.Time     `json:"created_at"`
	UpdatedAt               time.Time     `json:"updated_at"`
	ActivationCode          pgtype.Text   `json:"activation_code"`
	ActivationCodeExpiresAt time.Time     `json:"activation_code_expires_at"`
	DeviceName              pgtype.Text   `json:"device_name"`
	DeviceBrand             pgtype.Text   `json:"device_brand"`
	DeviceModel             pgtype.Text   `json:"device_model"`
	DeviceSerialNumber      pgtype.Text   `json:"device_serial_number"`
	DeviceOs                pgtype.Text   `json:"device_os"`
	DeviceRam               pgtype.Float8 `json:"device_ram"`
	DeviceStorage           pgtype.Float8 `json:"device_storage"`
	DeviceOsVersion         pgtype.Text   `json:"device_os_version"`
	ActionIds               interface{}   `json:"action_ids"`
}

func (q *Queries) GetDevices(ctx context.Context, arg GetDevicesParams) ([]GetDevicesRow, error) {
	rows, err := q.db.Query(ctx, getDevices, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetDevicesRow{}
	for rows.Next() {
		var i GetDevicesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Enabled,
			&i.FacilityID,
			&i.Password,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ActivationCode,
			&i.ActivationCodeExpiresAt,
			&i.DeviceName,
			&i.DeviceBrand,
			&i.DeviceModel,
			&i.DeviceSerialNumber,
			&i.DeviceOs,
			&i.DeviceRam,
			&i.DeviceStorage,
			&i.DeviceOsVersion,
			&i.ActionIds,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDevice = `-- name: UpdateDevice :one
UPDATE "device"
SET
    name = COALESCE($1, name),
    password = COALESCE($2, password),
    enabled = COALESCE($3, enabled),
    active = COALESCE($4, active),
    activation_code = COALESCE($5, activation_code),
    activation_code_expires_at = COALESCE($6, activation_code_expires_at),
    device_name = COALESCE($7, device_name),
    device_brand = COALESCE($8, device_brand),
    device_model = COALESCE($9, device_model),
    device_serial_number = COALESCE($10, device_serial_number),
    device_os = COALESCE($11, device_os),
    device_ram = COALESCE($12, device_ram),
    device_storage = COALESCE($13, device_storage),
    device_os_version = COALESCE($14, device_os_version),
    facility_id = COALESCE($15, facility_id),
    updated_at = COALESCE($16, updated_at)
WHERE
    account_id = $17 AND id = $18
RETURNING id, name, password, enabled, active, activation_code, activation_code_expires_at, device_name, device_model, device_brand, device_serial_number, device_os, device_ram, device_storage, device_os_version, facility_id, account_id, created_at, updated_at
`

type UpdateDeviceParams struct {
	Name                    pgtype.Text        `json:"name"`
	Password                pgtype.Text        `json:"password"`
	Enabled                 pgtype.Bool        `json:"enabled"`
	Active                  pgtype.Bool        `json:"active"`
	ActivationCode          pgtype.Text        `json:"activation_code"`
	ActivationCodeExpiresAt pgtype.Timestamptz `json:"activation_code_expires_at"`
	DeviceName              pgtype.Text        `json:"device_name"`
	DeviceBrand             pgtype.Text        `json:"device_brand"`
	DeviceModel             pgtype.Text        `json:"device_model"`
	DeviceSerialNumber      pgtype.Text        `json:"device_serial_number"`
	DeviceOs                pgtype.Text        `json:"device_os"`
	DeviceRam               pgtype.Float8      `json:"device_ram"`
	DeviceStorage           pgtype.Float8      `json:"device_storage"`
	DeviceOsVersion         pgtype.Text        `json:"device_os_version"`
	FacilityID              pgtype.Int8        `json:"facility_id"`
	UpdatedAt               pgtype.Timestamptz `json:"updated_at"`
	AccountID               int64              `json:"account_id"`
	ID                      int64              `json:"id"`
}

func (q *Queries) UpdateDevice(ctx context.Context, arg UpdateDeviceParams) (Device, error) {
	row := q.db.QueryRow(ctx, updateDevice,
		arg.Name,
		arg.Password,
		arg.Enabled,
		arg.Active,
		arg.ActivationCode,
		arg.ActivationCodeExpiresAt,
		arg.DeviceName,
		arg.DeviceBrand,
		arg.DeviceModel,
		arg.DeviceSerialNumber,
		arg.DeviceOs,
		arg.DeviceRam,
		arg.DeviceStorage,
		arg.DeviceOsVersion,
		arg.FacilityID,
		arg.UpdatedAt,
		arg.AccountID,
		arg.ID,
	)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Enabled,
		&i.Active,
		&i.ActivationCode,
		&i.ActivationCodeExpiresAt,
		&i.DeviceName,
		&i.DeviceModel,
		&i.DeviceBrand,
		&i.DeviceSerialNumber,
		&i.DeviceOs,
		&i.DeviceRam,
		&i.DeviceStorage,
		&i.DeviceOsVersion,
		&i.FacilityID,
		&i.AccountID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
