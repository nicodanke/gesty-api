// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: role.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRole = `-- name: CreateRole :one
INSERT INTO "role" (
    account_id, name, description
) VALUES (
    $1, $2, $3
) RETURNING id, name, description, account_id
`

type CreateRoleParams struct {
	AccountID   int64       `json:"account_id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, createRole, arg.AccountID, arg.Name, arg.Description)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.AccountID,
	)
	return i, err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM "role"
WHERE account_id = $1 AND id = $2
`

type DeleteRoleParams struct {
	AccountID int64 `json:"account_id"`
	ID        int64 `json:"id"`
}

func (q *Queries) DeleteRole(ctx context.Context, arg DeleteRoleParams) error {
	_, err := q.db.Exec(ctx, deleteRole, arg.AccountID, arg.ID)
	return err
}

const getRole = `-- name: GetRole :one
SELECT r.id, r.name, r.description,
    COALESCE(
        ARRAY_AGG(rp.permission_id) FILTER (WHERE rp.permission_id IS NOT NULL),
        '{}'::int8[]
    ) as permission_ids
FROM "role" r
LEFT JOIN role_permission rp ON r.id = rp.role_id
WHERE r.account_id = $1 AND id = $2
GROUP BY r.id, r.name, r.description
LIMIT 1
`

type GetRoleParams struct {
	AccountID int64 `json:"account_id"`
	ID        int64 `json:"id"`
}

type GetRoleRow struct {
	ID            int64       `json:"id"`
	Name          string      `json:"name"`
	Description   pgtype.Text `json:"description"`
	PermissionIds interface{} `json:"permission_ids"`
}

func (q *Queries) GetRole(ctx context.Context, arg GetRoleParams) (GetRoleRow, error) {
	row := q.db.QueryRow(ctx, getRole, arg.AccountID, arg.ID)
	var i GetRoleRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.PermissionIds,
	)
	return i, err
}

const getRoles = `-- name: GetRoles :many
SELECT r.id, r.name, r.description,
    COALESCE(
        ARRAY_AGG(rp.permission_id) FILTER (WHERE rp.permission_id IS NOT NULL),
        '{}'::int8[]
    ) as permission_ids
FROM "role" r
LEFT JOIN role_permission rp ON r.id = rp.role_id
WHERE r.account_id = $1
GROUP BY r.id, r.name, r.description
ORDER BY r.name
LIMIT $2
OFFSET $3
`

type GetRolesParams struct {
	AccountID int64 `json:"account_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

type GetRolesRow struct {
	ID            int64       `json:"id"`
	Name          string      `json:"name"`
	Description   pgtype.Text `json:"description"`
	PermissionIds interface{} `json:"permission_ids"`
}

func (q *Queries) GetRoles(ctx context.Context, arg GetRolesParams) ([]GetRolesRow, error) {
	rows, err := q.db.Query(ctx, getRoles, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetRolesRow{}
	for rows.Next() {
		var i GetRolesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.PermissionIds,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRole = `-- name: UpdateRole :one
UPDATE "role"
SET
    name = COALESCE($1, name),
    description = COALESCE($2, description)
WHERE
    account_id = $3 AND id = $4
RETURNING id, name, description, account_id
`

type UpdateRoleParams struct {
	Name        pgtype.Text `json:"name"`
	Description pgtype.Text `json:"description"`
	AccountID   int64       `json:"account_id"`
	ID          int64       `json:"id"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, updateRole,
		arg.Name,
		arg.Description,
		arg.AccountID,
		arg.ID,
	)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.AccountID,
	)
	return i, err
}
