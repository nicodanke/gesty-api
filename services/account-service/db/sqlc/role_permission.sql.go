// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: role_permission.sql

package db

import (
	"context"
)

const createRolePermission = `-- name: CreateRolePermission :one
INSERT INTO role_permission (
    role_id, permission_id
) VALUES (
    $1, $2
) RETURNING role_id, permission_id
`

type CreateRolePermissionParams struct {
	RoleID       int64 `json:"role_id"`
	PermissionID int64 `json:"permission_id"`
}

func (q *Queries) CreateRolePermission(ctx context.Context, arg CreateRolePermissionParams) (RolePermission, error) {
	row := q.db.QueryRow(ctx, createRolePermission, arg.RoleID, arg.PermissionID)
	var i RolePermission
	err := row.Scan(&i.RoleID, &i.PermissionID)
	return i, err
}

const deleteRolePermissions = `-- name: DeleteRolePermissions :exec
DELETE FROM role_permission
WHERE role_id = $1
`

func (q *Queries) DeleteRolePermissions(ctx context.Context, roleID int64) error {
	_, err := q.db.Exec(ctx, deleteRolePermissions, roleID)
	return err
}

const getRolePermissionsByRoleId = `-- name: GetRolePermissionsByRoleId :many
SELECT role_id, permission_id FROM role_permission
WHERE role_id = $1
`

func (q *Queries) GetRolePermissionsByRoleId(ctx context.Context, roleID int64) ([]RolePermission, error) {
	rows, err := q.db.Query(ctx, getRolePermissionsByRoleId, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RolePermission{}
	for rows.Next() {
		var i RolePermission
		if err := rows.Scan(&i.RoleID, &i.PermissionID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
