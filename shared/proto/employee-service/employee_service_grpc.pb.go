// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: employee-service/employee_service.proto

package employee_service

import (
	context "context"
	action "github.com/nicodanke/gesty-api/shared/proto/employee-service/requests/action"
	device "github.com/nicodanke/gesty-api/shared/proto/employee-service/requests/device"
	employee "github.com/nicodanke/gesty-api/shared/proto/employee-service/requests/employee"
	facility "github.com/nicodanke/gesty-api/shared/proto/employee-service/requests/facility"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EmployeeService_GetAction_FullMethodName              = "/employee_service.EmployeeService/GetAction"
	EmployeeService_GetActions_FullMethodName             = "/employee_service.EmployeeService/GetActions"
	EmployeeService_CreateAction_FullMethodName           = "/employee_service.EmployeeService/CreateAction"
	EmployeeService_UpdateAction_FullMethodName           = "/employee_service.EmployeeService/UpdateAction"
	EmployeeService_DeleteAction_FullMethodName           = "/employee_service.EmployeeService/DeleteAction"
	EmployeeService_GetFacility_FullMethodName            = "/employee_service.EmployeeService/GetFacility"
	EmployeeService_GetFacilities_FullMethodName          = "/employee_service.EmployeeService/GetFacilities"
	EmployeeService_CreateFacility_FullMethodName         = "/employee_service.EmployeeService/CreateFacility"
	EmployeeService_UpdateFacility_FullMethodName         = "/employee_service.EmployeeService/UpdateFacility"
	EmployeeService_DeleteFacility_FullMethodName         = "/employee_service.EmployeeService/DeleteFacility"
	EmployeeService_GetEmployee_FullMethodName            = "/employee_service.EmployeeService/GetEmployee"
	EmployeeService_GetEmployees_FullMethodName           = "/employee_service.EmployeeService/GetEmployees"
	EmployeeService_CreateEmployee_FullMethodName         = "/employee_service.EmployeeService/CreateEmployee"
	EmployeeService_UpdateEmployee_FullMethodName         = "/employee_service.EmployeeService/UpdateEmployee"
	EmployeeService_DeleteEmployee_FullMethodName         = "/employee_service.EmployeeService/DeleteEmployee"
	EmployeeService_GetDevice_FullMethodName              = "/employee_service.EmployeeService/GetDevice"
	EmployeeService_GetDevices_FullMethodName             = "/employee_service.EmployeeService/GetDevices"
	EmployeeService_CreateDevice_FullMethodName           = "/employee_service.EmployeeService/CreateDevice"
	EmployeeService_UpdateDevice_FullMethodName           = "/employee_service.EmployeeService/UpdateDevice"
	EmployeeService_DeleteDevice_FullMethodName           = "/employee_service.EmployeeService/DeleteDevice"
	EmployeeService_GenerateActivationCode_FullMethodName = "/employee_service.EmployeeService/GenerateActivationCode"
	EmployeeService_ActivateDevice_FullMethodName         = "/employee_service.EmployeeService/ActivateDevice"
	EmployeeService_RefreshDeviceToken_FullMethodName     = "/employee_service.EmployeeService/RefreshDeviceToken"
)

// EmployeeServiceClient is the client API for EmployeeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmployeeServiceClient interface {
	// ACTION
	GetAction(ctx context.Context, in *action.GetActionRequest, opts ...grpc.CallOption) (*action.GetActionResponse, error)
	GetActions(ctx context.Context, in *action.GetActionsRequest, opts ...grpc.CallOption) (*action.GetActionsResponse, error)
	CreateAction(ctx context.Context, in *action.CreateActionRequest, opts ...grpc.CallOption) (*action.CreateActionResponse, error)
	UpdateAction(ctx context.Context, in *action.UpdateActionRequest, opts ...grpc.CallOption) (*action.UpdateActionResponse, error)
	DeleteAction(ctx context.Context, in *action.DeleteActionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// FACILITY
	GetFacility(ctx context.Context, in *facility.GetFacilityRequest, opts ...grpc.CallOption) (*facility.GetFacilityResponse, error)
	GetFacilities(ctx context.Context, in *facility.GetFacilitiesRequest, opts ...grpc.CallOption) (*facility.GetFacilitiesResponse, error)
	CreateFacility(ctx context.Context, in *facility.CreateFacilityRequest, opts ...grpc.CallOption) (*facility.CreateFacilityResponse, error)
	UpdateFacility(ctx context.Context, in *facility.UpdateFacilityRequest, opts ...grpc.CallOption) (*facility.UpdateFacilityResponse, error)
	DeleteFacility(ctx context.Context, in *facility.DeleteFacilityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// EMPLOYEE
	GetEmployee(ctx context.Context, in *employee.GetEmployeeRequest, opts ...grpc.CallOption) (*employee.GetEmployeeResponse, error)
	GetEmployees(ctx context.Context, in *employee.GetEmployeesRequest, opts ...grpc.CallOption) (*employee.GetEmployeesResponse, error)
	CreateEmployee(ctx context.Context, in *employee.CreateEmployeeRequest, opts ...grpc.CallOption) (*employee.CreateEmployeeResponse, error)
	UpdateEmployee(ctx context.Context, in *employee.UpdateEmployeeRequest, opts ...grpc.CallOption) (*employee.UpdateEmployeeResponse, error)
	DeleteEmployee(ctx context.Context, in *employee.DeleteEmployeeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DEVICE
	GetDevice(ctx context.Context, in *device.GetDeviceRequest, opts ...grpc.CallOption) (*device.GetDeviceResponse, error)
	GetDevices(ctx context.Context, in *device.GetDevicesRequest, opts ...grpc.CallOption) (*device.GetDevicesResponse, error)
	CreateDevice(ctx context.Context, in *device.CreateDeviceRequest, opts ...grpc.CallOption) (*device.CreateDeviceResponse, error)
	UpdateDevice(ctx context.Context, in *device.UpdateDeviceRequest, opts ...grpc.CallOption) (*device.UpdateDeviceResponse, error)
	DeleteDevice(ctx context.Context, in *device.DeleteDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GenerateActivationCode(ctx context.Context, in *device.GenerateActivationCodeRequest, opts ...grpc.CallOption) (*device.GenerateActivationCodeResponse, error)
	ActivateDevice(ctx context.Context, in *device.ActivateDeviceRequest, opts ...grpc.CallOption) (*device.ActivateDeviceResponse, error)
	RefreshDeviceToken(ctx context.Context, in *device.RefreshDeviceTokenRequest, opts ...grpc.CallOption) (*device.RefreshDeviceTokenResponse, error)
}

type employeeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmployeeServiceClient(cc grpc.ClientConnInterface) EmployeeServiceClient {
	return &employeeServiceClient{cc}
}

func (c *employeeServiceClient) GetAction(ctx context.Context, in *action.GetActionRequest, opts ...grpc.CallOption) (*action.GetActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(action.GetActionResponse)
	err := c.cc.Invoke(ctx, EmployeeService_GetAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) GetActions(ctx context.Context, in *action.GetActionsRequest, opts ...grpc.CallOption) (*action.GetActionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(action.GetActionsResponse)
	err := c.cc.Invoke(ctx, EmployeeService_GetActions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) CreateAction(ctx context.Context, in *action.CreateActionRequest, opts ...grpc.CallOption) (*action.CreateActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(action.CreateActionResponse)
	err := c.cc.Invoke(ctx, EmployeeService_CreateAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) UpdateAction(ctx context.Context, in *action.UpdateActionRequest, opts ...grpc.CallOption) (*action.UpdateActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(action.UpdateActionResponse)
	err := c.cc.Invoke(ctx, EmployeeService_UpdateAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) DeleteAction(ctx context.Context, in *action.DeleteActionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EmployeeService_DeleteAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) GetFacility(ctx context.Context, in *facility.GetFacilityRequest, opts ...grpc.CallOption) (*facility.GetFacilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(facility.GetFacilityResponse)
	err := c.cc.Invoke(ctx, EmployeeService_GetFacility_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) GetFacilities(ctx context.Context, in *facility.GetFacilitiesRequest, opts ...grpc.CallOption) (*facility.GetFacilitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(facility.GetFacilitiesResponse)
	err := c.cc.Invoke(ctx, EmployeeService_GetFacilities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) CreateFacility(ctx context.Context, in *facility.CreateFacilityRequest, opts ...grpc.CallOption) (*facility.CreateFacilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(facility.CreateFacilityResponse)
	err := c.cc.Invoke(ctx, EmployeeService_CreateFacility_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) UpdateFacility(ctx context.Context, in *facility.UpdateFacilityRequest, opts ...grpc.CallOption) (*facility.UpdateFacilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(facility.UpdateFacilityResponse)
	err := c.cc.Invoke(ctx, EmployeeService_UpdateFacility_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) DeleteFacility(ctx context.Context, in *facility.DeleteFacilityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EmployeeService_DeleteFacility_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) GetEmployee(ctx context.Context, in *employee.GetEmployeeRequest, opts ...grpc.CallOption) (*employee.GetEmployeeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(employee.GetEmployeeResponse)
	err := c.cc.Invoke(ctx, EmployeeService_GetEmployee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) GetEmployees(ctx context.Context, in *employee.GetEmployeesRequest, opts ...grpc.CallOption) (*employee.GetEmployeesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(employee.GetEmployeesResponse)
	err := c.cc.Invoke(ctx, EmployeeService_GetEmployees_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) CreateEmployee(ctx context.Context, in *employee.CreateEmployeeRequest, opts ...grpc.CallOption) (*employee.CreateEmployeeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(employee.CreateEmployeeResponse)
	err := c.cc.Invoke(ctx, EmployeeService_CreateEmployee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) UpdateEmployee(ctx context.Context, in *employee.UpdateEmployeeRequest, opts ...grpc.CallOption) (*employee.UpdateEmployeeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(employee.UpdateEmployeeResponse)
	err := c.cc.Invoke(ctx, EmployeeService_UpdateEmployee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) DeleteEmployee(ctx context.Context, in *employee.DeleteEmployeeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EmployeeService_DeleteEmployee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) GetDevice(ctx context.Context, in *device.GetDeviceRequest, opts ...grpc.CallOption) (*device.GetDeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(device.GetDeviceResponse)
	err := c.cc.Invoke(ctx, EmployeeService_GetDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) GetDevices(ctx context.Context, in *device.GetDevicesRequest, opts ...grpc.CallOption) (*device.GetDevicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(device.GetDevicesResponse)
	err := c.cc.Invoke(ctx, EmployeeService_GetDevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) CreateDevice(ctx context.Context, in *device.CreateDeviceRequest, opts ...grpc.CallOption) (*device.CreateDeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(device.CreateDeviceResponse)
	err := c.cc.Invoke(ctx, EmployeeService_CreateDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) UpdateDevice(ctx context.Context, in *device.UpdateDeviceRequest, opts ...grpc.CallOption) (*device.UpdateDeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(device.UpdateDeviceResponse)
	err := c.cc.Invoke(ctx, EmployeeService_UpdateDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) DeleteDevice(ctx context.Context, in *device.DeleteDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EmployeeService_DeleteDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) GenerateActivationCode(ctx context.Context, in *device.GenerateActivationCodeRequest, opts ...grpc.CallOption) (*device.GenerateActivationCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(device.GenerateActivationCodeResponse)
	err := c.cc.Invoke(ctx, EmployeeService_GenerateActivationCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) ActivateDevice(ctx context.Context, in *device.ActivateDeviceRequest, opts ...grpc.CallOption) (*device.ActivateDeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(device.ActivateDeviceResponse)
	err := c.cc.Invoke(ctx, EmployeeService_ActivateDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) RefreshDeviceToken(ctx context.Context, in *device.RefreshDeviceTokenRequest, opts ...grpc.CallOption) (*device.RefreshDeviceTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(device.RefreshDeviceTokenResponse)
	err := c.cc.Invoke(ctx, EmployeeService_RefreshDeviceToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmployeeServiceServer is the server API for EmployeeService service.
// All implementations must embed UnimplementedEmployeeServiceServer
// for forward compatibility.
type EmployeeServiceServer interface {
	// ACTION
	GetAction(context.Context, *action.GetActionRequest) (*action.GetActionResponse, error)
	GetActions(context.Context, *action.GetActionsRequest) (*action.GetActionsResponse, error)
	CreateAction(context.Context, *action.CreateActionRequest) (*action.CreateActionResponse, error)
	UpdateAction(context.Context, *action.UpdateActionRequest) (*action.UpdateActionResponse, error)
	DeleteAction(context.Context, *action.DeleteActionRequest) (*emptypb.Empty, error)
	// FACILITY
	GetFacility(context.Context, *facility.GetFacilityRequest) (*facility.GetFacilityResponse, error)
	GetFacilities(context.Context, *facility.GetFacilitiesRequest) (*facility.GetFacilitiesResponse, error)
	CreateFacility(context.Context, *facility.CreateFacilityRequest) (*facility.CreateFacilityResponse, error)
	UpdateFacility(context.Context, *facility.UpdateFacilityRequest) (*facility.UpdateFacilityResponse, error)
	DeleteFacility(context.Context, *facility.DeleteFacilityRequest) (*emptypb.Empty, error)
	// EMPLOYEE
	GetEmployee(context.Context, *employee.GetEmployeeRequest) (*employee.GetEmployeeResponse, error)
	GetEmployees(context.Context, *employee.GetEmployeesRequest) (*employee.GetEmployeesResponse, error)
	CreateEmployee(context.Context, *employee.CreateEmployeeRequest) (*employee.CreateEmployeeResponse, error)
	UpdateEmployee(context.Context, *employee.UpdateEmployeeRequest) (*employee.UpdateEmployeeResponse, error)
	DeleteEmployee(context.Context, *employee.DeleteEmployeeRequest) (*emptypb.Empty, error)
	// DEVICE
	GetDevice(context.Context, *device.GetDeviceRequest) (*device.GetDeviceResponse, error)
	GetDevices(context.Context, *device.GetDevicesRequest) (*device.GetDevicesResponse, error)
	CreateDevice(context.Context, *device.CreateDeviceRequest) (*device.CreateDeviceResponse, error)
	UpdateDevice(context.Context, *device.UpdateDeviceRequest) (*device.UpdateDeviceResponse, error)
	DeleteDevice(context.Context, *device.DeleteDeviceRequest) (*emptypb.Empty, error)
	GenerateActivationCode(context.Context, *device.GenerateActivationCodeRequest) (*device.GenerateActivationCodeResponse, error)
	ActivateDevice(context.Context, *device.ActivateDeviceRequest) (*device.ActivateDeviceResponse, error)
	RefreshDeviceToken(context.Context, *device.RefreshDeviceTokenRequest) (*device.RefreshDeviceTokenResponse, error)
	mustEmbedUnimplementedEmployeeServiceServer()
}

// UnimplementedEmployeeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEmployeeServiceServer struct{}

func (UnimplementedEmployeeServiceServer) GetAction(context.Context, *action.GetActionRequest) (*action.GetActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAction not implemented")
}
func (UnimplementedEmployeeServiceServer) GetActions(context.Context, *action.GetActionsRequest) (*action.GetActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActions not implemented")
}
func (UnimplementedEmployeeServiceServer) CreateAction(context.Context, *action.CreateActionRequest) (*action.CreateActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAction not implemented")
}
func (UnimplementedEmployeeServiceServer) UpdateAction(context.Context, *action.UpdateActionRequest) (*action.UpdateActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAction not implemented")
}
func (UnimplementedEmployeeServiceServer) DeleteAction(context.Context, *action.DeleteActionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAction not implemented")
}
func (UnimplementedEmployeeServiceServer) GetFacility(context.Context, *facility.GetFacilityRequest) (*facility.GetFacilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFacility not implemented")
}
func (UnimplementedEmployeeServiceServer) GetFacilities(context.Context, *facility.GetFacilitiesRequest) (*facility.GetFacilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFacilities not implemented")
}
func (UnimplementedEmployeeServiceServer) CreateFacility(context.Context, *facility.CreateFacilityRequest) (*facility.CreateFacilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFacility not implemented")
}
func (UnimplementedEmployeeServiceServer) UpdateFacility(context.Context, *facility.UpdateFacilityRequest) (*facility.UpdateFacilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFacility not implemented")
}
func (UnimplementedEmployeeServiceServer) DeleteFacility(context.Context, *facility.DeleteFacilityRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFacility not implemented")
}
func (UnimplementedEmployeeServiceServer) GetEmployee(context.Context, *employee.GetEmployeeRequest) (*employee.GetEmployeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployee not implemented")
}
func (UnimplementedEmployeeServiceServer) GetEmployees(context.Context, *employee.GetEmployeesRequest) (*employee.GetEmployeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployees not implemented")
}
func (UnimplementedEmployeeServiceServer) CreateEmployee(context.Context, *employee.CreateEmployeeRequest) (*employee.CreateEmployeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmployee not implemented")
}
func (UnimplementedEmployeeServiceServer) UpdateEmployee(context.Context, *employee.UpdateEmployeeRequest) (*employee.UpdateEmployeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmployee not implemented")
}
func (UnimplementedEmployeeServiceServer) DeleteEmployee(context.Context, *employee.DeleteEmployeeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmployee not implemented")
}
func (UnimplementedEmployeeServiceServer) GetDevice(context.Context, *device.GetDeviceRequest) (*device.GetDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (UnimplementedEmployeeServiceServer) GetDevices(context.Context, *device.GetDevicesRequest) (*device.GetDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevices not implemented")
}
func (UnimplementedEmployeeServiceServer) CreateDevice(context.Context, *device.CreateDeviceRequest) (*device.CreateDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (UnimplementedEmployeeServiceServer) UpdateDevice(context.Context, *device.UpdateDeviceRequest) (*device.UpdateDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevice not implemented")
}
func (UnimplementedEmployeeServiceServer) DeleteDevice(context.Context, *device.DeleteDeviceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (UnimplementedEmployeeServiceServer) GenerateActivationCode(context.Context, *device.GenerateActivationCodeRequest) (*device.GenerateActivationCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateActivationCode not implemented")
}
func (UnimplementedEmployeeServiceServer) ActivateDevice(context.Context, *device.ActivateDeviceRequest) (*device.ActivateDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateDevice not implemented")
}
func (UnimplementedEmployeeServiceServer) RefreshDeviceToken(context.Context, *device.RefreshDeviceTokenRequest) (*device.RefreshDeviceTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshDeviceToken not implemented")
}
func (UnimplementedEmployeeServiceServer) mustEmbedUnimplementedEmployeeServiceServer() {}
func (UnimplementedEmployeeServiceServer) testEmbeddedByValue()                         {}

// UnsafeEmployeeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmployeeServiceServer will
// result in compilation errors.
type UnsafeEmployeeServiceServer interface {
	mustEmbedUnimplementedEmployeeServiceServer()
}

func RegisterEmployeeServiceServer(s grpc.ServiceRegistrar, srv EmployeeServiceServer) {
	// If the following call pancis, it indicates UnimplementedEmployeeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EmployeeService_ServiceDesc, srv)
}

func _EmployeeService_GetAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(action.GetActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).GetAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_GetAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).GetAction(ctx, req.(*action.GetActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_GetActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(action.GetActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).GetActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_GetActions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).GetActions(ctx, req.(*action.GetActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_CreateAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(action.CreateActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).CreateAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_CreateAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).CreateAction(ctx, req.(*action.CreateActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_UpdateAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(action.UpdateActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).UpdateAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_UpdateAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).UpdateAction(ctx, req.(*action.UpdateActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_DeleteAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(action.DeleteActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).DeleteAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_DeleteAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).DeleteAction(ctx, req.(*action.DeleteActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_GetFacility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(facility.GetFacilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).GetFacility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_GetFacility_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).GetFacility(ctx, req.(*facility.GetFacilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_GetFacilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(facility.GetFacilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).GetFacilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_GetFacilities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).GetFacilities(ctx, req.(*facility.GetFacilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_CreateFacility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(facility.CreateFacilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).CreateFacility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_CreateFacility_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).CreateFacility(ctx, req.(*facility.CreateFacilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_UpdateFacility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(facility.UpdateFacilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).UpdateFacility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_UpdateFacility_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).UpdateFacility(ctx, req.(*facility.UpdateFacilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_DeleteFacility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(facility.DeleteFacilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).DeleteFacility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_DeleteFacility_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).DeleteFacility(ctx, req.(*facility.DeleteFacilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_GetEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(employee.GetEmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).GetEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_GetEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).GetEmployee(ctx, req.(*employee.GetEmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_GetEmployees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(employee.GetEmployeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).GetEmployees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_GetEmployees_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).GetEmployees(ctx, req.(*employee.GetEmployeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_CreateEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(employee.CreateEmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).CreateEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_CreateEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).CreateEmployee(ctx, req.(*employee.CreateEmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_UpdateEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(employee.UpdateEmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).UpdateEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_UpdateEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).UpdateEmployee(ctx, req.(*employee.UpdateEmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_DeleteEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(employee.DeleteEmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).DeleteEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_DeleteEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).DeleteEmployee(ctx, req.(*employee.DeleteEmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(device.GetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_GetDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).GetDevice(ctx, req.(*device.GetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_GetDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(device.GetDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).GetDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_GetDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).GetDevices(ctx, req.(*device.GetDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(device.CreateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_CreateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).CreateDevice(ctx, req.(*device.CreateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(device.UpdateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_UpdateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).UpdateDevice(ctx, req.(*device.UpdateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(device.DeleteDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_DeleteDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).DeleteDevice(ctx, req.(*device.DeleteDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_GenerateActivationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(device.GenerateActivationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).GenerateActivationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_GenerateActivationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).GenerateActivationCode(ctx, req.(*device.GenerateActivationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_ActivateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(device.ActivateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).ActivateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_ActivateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).ActivateDevice(ctx, req.(*device.ActivateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_RefreshDeviceToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(device.RefreshDeviceTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).RefreshDeviceToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_RefreshDeviceToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).RefreshDeviceToken(ctx, req.(*device.RefreshDeviceTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmployeeService_ServiceDesc is the grpc.ServiceDesc for EmployeeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmployeeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "employee_service.EmployeeService",
	HandlerType: (*EmployeeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAction",
			Handler:    _EmployeeService_GetAction_Handler,
		},
		{
			MethodName: "GetActions",
			Handler:    _EmployeeService_GetActions_Handler,
		},
		{
			MethodName: "CreateAction",
			Handler:    _EmployeeService_CreateAction_Handler,
		},
		{
			MethodName: "UpdateAction",
			Handler:    _EmployeeService_UpdateAction_Handler,
		},
		{
			MethodName: "DeleteAction",
			Handler:    _EmployeeService_DeleteAction_Handler,
		},
		{
			MethodName: "GetFacility",
			Handler:    _EmployeeService_GetFacility_Handler,
		},
		{
			MethodName: "GetFacilities",
			Handler:    _EmployeeService_GetFacilities_Handler,
		},
		{
			MethodName: "CreateFacility",
			Handler:    _EmployeeService_CreateFacility_Handler,
		},
		{
			MethodName: "UpdateFacility",
			Handler:    _EmployeeService_UpdateFacility_Handler,
		},
		{
			MethodName: "DeleteFacility",
			Handler:    _EmployeeService_DeleteFacility_Handler,
		},
		{
			MethodName: "GetEmployee",
			Handler:    _EmployeeService_GetEmployee_Handler,
		},
		{
			MethodName: "GetEmployees",
			Handler:    _EmployeeService_GetEmployees_Handler,
		},
		{
			MethodName: "CreateEmployee",
			Handler:    _EmployeeService_CreateEmployee_Handler,
		},
		{
			MethodName: "UpdateEmployee",
			Handler:    _EmployeeService_UpdateEmployee_Handler,
		},
		{
			MethodName: "DeleteEmployee",
			Handler:    _EmployeeService_DeleteEmployee_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _EmployeeService_GetDevice_Handler,
		},
		{
			MethodName: "GetDevices",
			Handler:    _EmployeeService_GetDevices_Handler,
		},
		{
			MethodName: "CreateDevice",
			Handler:    _EmployeeService_CreateDevice_Handler,
		},
		{
			MethodName: "UpdateDevice",
			Handler:    _EmployeeService_UpdateDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _EmployeeService_DeleteDevice_Handler,
		},
		{
			MethodName: "GenerateActivationCode",
			Handler:    _EmployeeService_GenerateActivationCode_Handler,
		},
		{
			MethodName: "ActivateDevice",
			Handler:    _EmployeeService_ActivateDevice_Handler,
		},
		{
			MethodName: "RefreshDeviceToken",
			Handler:    _EmployeeService_RefreshDeviceToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "employee-service/employee_service.proto",
}
